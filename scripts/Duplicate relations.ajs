/*
 * Duplicate relations
 * 
 * Condition: Excel is installed
 * Working: Loop through each relation  
 *          Find relation(s) with equal type, source and target
 * 			If found, write relation  in Excel-format
 *          User dialog to decide on name en folder of Excel-file
 * Error: No duplicates found
 *        Excel already exists and is locked
 * 
 * This work is licensed under the HUMANS Licence described below.
 * 
 * (c) Archi-community 2022
 * 
 * The HUMANS (Help Us Make Archi Noteworthy & Sustainable) licence goal is to bring happiness
 * to both Archi users and developers. 
 *
 * The only restrictions that apply are:
 *  - You can't redistribute this script.
 *  - You can't use this script for commercial purposes 
 */ 

 
// Load MyExcel and JSZip JS file
load(__DIR__ + "examples/lib/jszip-101.js");
load(__DIR__ + "examples/lib/myexcel.js");

// Show output in the console
console.show();
console.clear()
console.log("> Starting Excel Export");

// Create a new Excel file with a default font and colour
var excel = $JExcel.new("Calibri 12 #333333");

// Add a new sheet with a name
excel.set( { sheet:0, value:"Duplicate relations" } );

// Set up some headers including unique tags 
const  alltags = ["Type", "ID","Name","Documentation", "Source", "Target"] ;
$('relationship').each(function(r) {
 for (i = r; i<r.prop().length;i++) {alltags.push(r.prop()[i])};
});
const headers = [...new Set(alltags)]; //make tags unique


// Format the header with a style
var formatHeader = excel.addStyle ({
    fill: "#dddddd",
	border: "thin, thin, thin, thin #555555",
	font: "Calibri 12 #000000 B",
});

// Set the headers
for(var i = 0; i < headers.length; i++) {
	if (i<6) {
	  excel.set(0, i, 0, headers[i], formatHeader);
	} else {
	  excel.set(0, i, 0, "Tag."+headers[i], formatHeader);
	} 
    excel.set(0, i, undefined, "auto"); // column width is auto
};


// Loop through all relations and set cells to object info
	var current_row = 1;
	$('relationship').each(function(r) {
	
		// select those relationships with duplicate type, source, target
		duprel=$(r.source).outRels(r.type).filter(function(d) {
			return 	d.target.equals(r.target) &&  r.id != d.id;  //true or false
		}).first();

		if (duprel){
//			console.log(duprel.type, duprel.source, duprel.target);		
	
			excel.set(0, 0, current_row, r.type);
			excel.set(0, 1, current_row, r.id);
			excel.set(0, 2, current_row, r.name);
			excel.set(0, 3, current_row, r.documentation);
			excel.set(0, 4, current_row, r.source);
			excel.set(0, 5, current_row, r.target);
			for (i = 6; i<headers.length;i++) {
			  excel.set(0, i, current_row, r.prop(headers[i]) == null ? "" : r.prop(headers[i]) );
			  }
			current_row++;
		};


});

if(current_row < 2 ) {
  console.log("Succes. No duplicates found");
  exit();
}



// Open a dialog to let the user choose where to save the generated file
var defaultFileName = model.name ? model.name + "_relations.xlsx" : "Exported Model.xlsx"; // Default file name
var exportFile = window.promptSaveFile({ title: "Export to Excel", filterExtensions: [ "*.xlsx" ], fileName: defaultFileName } );

if(exportFile != null) {
	excel.generate(exportFile);
	console.log("> Export done");
}
else {
	console.log("> Export cancelled");
}
