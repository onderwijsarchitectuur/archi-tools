/*
 * Documentation elements
 * 
 * Condition: Excel is installed
 *            (At least) one view is selected
 * Working: Collect all used properties in elements
 *          Loop through alle elements 
 * 	    Write element and its documentation and properties in Excel-format
 *          User dialog to decide on name en folder of Excel file.
 * Error: Excel already exists and is locked
 * 
 * This work is licensed under the HUMANS Licence described below.
 * 
 * (c) Archi-community 2022
 * 
 * The HUMANS (Help Us Make Archi Noteworthy & Sustainable) licence goal is to bring happiness
 * to both Archi users and developers. 
 *
 * The only restrictions that apply are:
 *  - You can't redistribute this script.
 *  - You can't use this script for commercial purposes 
 */ 


 
// Load MyExcel and JSZip JS file
load(__DIR__ + "examples/lib/jszip-101.js");
load(__DIR__ + "examples/lib/myexcel.js");

// Show output in the console
console.show();
console.clear()
console.log("> Starting Excel Export");


var select=false; 
selection.filter("view").each(function(view) {


	// Create a new Excel file with a default font and colour
	var excel = $JExcel.new("Calibri 12 #333333");

	// Add a new sheet with a name
	excel.set( { sheet:0, value:"View-documentation" } );

	// Set up some headers including unique tags 
	const  alltags = ["Name","Type","Documentation"] ;
    $(view).find('element').not("business-object").each(function(o) {
	 for (i = 0; i<o.prop().length;i++) {alltags.push(o.prop()[i])};
	});
	const headers = [...new Set(alltags)]; //make tags unique


	// Format the header with a style
	var formatHeader = excel.addStyle ({
		fill: "#dddddd",
		border: "thin, thin, thin, thin #555555",
		font: "Calibri 12 #000000 B",
	});

	// Set the headers
	for(var i = 0; i < headers.length; i++) {
		if (i<3) {
		  excel.set(0, i, 0, headers[i], formatHeader);
		} else {
		  excel.set(0, i, 0, "Tag."+headers[i], formatHeader);
		} 
		excel.set(0, i, undefined, "auto"); // column width is auto
	}


	// Loop through all businessobject and set cells to object info
		var current_row = 1;
		$(view).find('business-object').each(function(o) {	
			excel.set(0, 0, current_row, o.name);
			excel.set(0, 1, current_row, o.type);
			excel.set(0, 2, current_row, o.prop("omschrijving"));
		current_row++;
		});

	// Loop through all elements and set cells to object info
		$(view).find('element').not("business-object"). each(function(o) {		
			excel.set(0, 0, current_row, o.name);
			excel.set(0, 1, current_row, o.type);
			excel.set(0, 2, current_row, o.documentation);
			current_row++;
		});


	// Open a dialog to let the user choose where to save the generated file
	var defaultFileName = view.name ? view.name + "_documentation.xlsx" : "Exported View.xlsx"; // Default file name
	var exportFile = window.promptSaveFile({ title: "Export to Excel", filterExtensions: [ "*.xlsx" ], fileName: defaultFileName } );

	if(exportFile != null) {
		excel.generate(exportFile);
		console.log("> Export done");
	}
	else {
		console.log("> Export cancelled");
	}


	select=true; 
});



if(!select) {
	console.log("Nothing to be documented. Please select a view"); 
}

