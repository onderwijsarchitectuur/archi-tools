/*
 * Copy views to model
 * 
 * Select one or more views to copy them to a newly created model including all the concepts (and objects)
 *
 * (c) 2022 Gerald Groot Roessink,  2022-12-16
 * 
 * This work is licensed under the HUMANS Licence described below.
 * 
 * The HUMANS (Help Us Make Archi Noteworthy & Sustainable) licence goal is to bring happiness
 * to both Archi users and developers. 
 *
 * The only restrictions that apply are:
 *  - You can't redistribute this script.
 *  - You can't use this script for commercial purposes 
 * 
 */


// Show output in the console
console.show();
console.clear();

var vw_selection = selection.filter("view");

if(vw_selection.size() < 1 ) {
  window.alert("Nothing to be copied. Please select one or more views");
  exit();
}


console.log("> Starting Copy");


// array for collection
const  foundelements = [] ;
const  foundrelations = [] ;
const  allviews = [] ;


vw_selection.each(function(view) {
	//get all views
	allviews.push(view);
	console.log("------------------\n   view", view.name);	

	//get all elements(no duplicates)
	var elements = $(view).find('element') ; 
	elements.each(function(e) {	
		var found=false;
		for(var i = 0; i < foundelements.length; i++) {
			if (foundelements[i].id === e.concept.id) {found=true};
		};
		if (!found) {foundelements.push(e.concept)};	
	});
	console.log("   number of elements", elements.length);
	console.log("      sum of elements", foundelements.length);

	//get all relations (no duplicates)
	found=false;
	var relations = $(view).find('relationship');
	relations.each(function(r) {
		var found=false;
		for(var i = 0; i < foundrelations.length; i++) {
			if (foundrelations[i].id === r.concept.id) {found=true};
		};
		if (!found) {foundrelations.push(r.concept)};	
	});
	console.log("   number of relations", relations.length);
	console.log("      sum of relations", foundrelations.length);


});

console.log ("-------");



//foundelements.forEach(function(x){console.log(x)});


// Create a new model and set it as the current model
$.model.create("Stripped model").setAsCurrent();
console.log("Created model: ", model.name);

// create separate sub-folder for business objects
var folder = $("folder.Business").first(); // Find folder called "Business" 
var BO_folder=folder.createFolder("Business-object"); // Create a sub-folder 


// Copy elements to new model
for(var ie = 0; ie < foundelements.length; ie++) {


	var element = foundelements[ie] ;
	var elementcopy = {} ;
	if (element.type == "business-object") {
		elementcopy = model.createElement(element.type, element.name, BO_folder);
	}
	else {
		elementcopy = model.createElement(element.type, element.name);
	};

	elementcopy.documentation = element.documentation;
	//console.log("Added - ", element.type, element.name);	

	// Copy properties belonging to element to new model.
	for(var j = 0; j < $(element).prop().length; j++) {
		var key = $(element).prop()[j];
		var val = $(element).prop($(element).prop()[j]); 			
		elementcopy.prop(key, val );
	};
	// Add a temporary property with the id of the original (to find copy in new model)
	elementcopy.prop("ORIG", element.id );

};


// Copy relationships to new model
for(var ir = 0; ir < foundrelations.length; ir++) {
	var relation = foundrelations[ir];
	
	src=find_copy_concept("ORIG", relation.source.id); // find source-copy in new model
	tar=find_copy_concept("ORIG", relation.target.id); // find target-copy in new model
//	console.log(relation.type, relation.name,src,tar);
	var relationcopy = model.createRelationship(relation.type, relation.name,src,tar);
	relationcopy.documentation = relation.documentation;
	relationcopy.accessType = relation.accessType;
	//if need be: associationDirected (association-relations) and influenceStrength (influence-relation)

	// Copy properties belonging to relation to new model.
	for(var j = 0; j < $(relation).prop().length; j++) {
		var key = $(relation).prop()[j];
		var val = $(relation).prop($(relation).prop()[j]); 			
		relationcopy.prop(key, val );
//		console.log("Props - ",  key, "=", val);
	};
	// Add a temporary property with the id of the original (to find copy in new model)
	relationcopy.prop("ORIG", relation.id );
};


// Copy views to new model
for(var iv = 0; iv < allviews.length; iv++) {

    var view = allviews[iv] ;
	var view_copy = model.createArchimateView(view.name);
	view_copy.documentation = view.documentation;
	view_copy.viewpoint = "layered";
	
	console.log("Added view - ", view.model, view.name, view.documentation);	


	// Copy properties belonging to view to new model.
	for(var j = 0; j < $(view).prop().length; j++) {
		var key = $(view).prop()[j];
		var val = $(view).prop($(view).prop()[j]); 			
		view_copy.prop(key, val );
	//console.log("Props - ",  key, "=", val);	
	};

    // add objects like grouping
    var  obj_copy = {} ;
    $(view).find('object').each(function(vo) {
		var obj=find_copy_concept("ORIG", vo.concept.id); // find object-copy in new model
        var bounds = vo.bounds;
		
		//calculate the absolute xy coordinates of nested elements.
		var x=bounds.x;
		var y=bounds.y;
		$(vo).parents().not('folder').not('archimate-diagram-model').each(function(mum){
			x=x+mum.bounds.x;
			y=y+mum.bounds.y;
		});
		
		//declare copy of visual as an object and use the id of the source visual object as key
        obj_copy[vo.id]=view_copy.createObject(obj, x, y, bounds.width, bounds.height, "true"); //autoNest=true

		// if need be: add other attributes 
		
    });


	//copy the visual concepts on the view
	
    // add visual elements
    var  obj_copy = {} ;
    $(view).find('element').each(function(ve) {
		var obj=find_copy_concept("ORIG", ve.concept.id); // find object-copy in new model
        var bounds = ve.bounds;
		
		//calculate the absolute xy coordinates of nested elements.
		var x=bounds.x;
		var y=bounds.y;
		$(ve).parents().not('folder').not('archimate-diagram-model').each(function(mum){
			x=x+mum.bounds.x;
			y=y+mum.bounds.y;
		});
		
		//declare copy of visual as an object and use the id of the source visual object as key
        obj_copy[ve.id]=view_copy.add(obj, x, y, bounds.width, bounds.height, "true"); //autoNest=true
		
		// if need be: add other attributes 
		obj.imagePosition = element.imagePosition;
		obj.fillColor = element.fillColor;

    });
 
   
    // add visual relationships
    $(view).find('relationship').each(function(vr) {
		var rel =  find_copy_concept("ORIG",vr.concept.id); // find relation-copy in new model
 
		var connection=view_copy.add(rel, obj_copy[vr.source.id], obj_copy[vr.target.id]);

		// bending of relation.
		var bendpoints = vr.getRelativeBendpoints();
		for(var k = 0; k < bendpoints.length; k++) {
			connection.addRelativeBendpoint(bendpoints[k],k)
		};	

		// if need be: add other attributes 
		// maybe later: relationship to relationship


    });

};


// remove temporary ORIG properties
$('concept').removeProp("ORIG");

// Open in UI
console.log("Opening model in tree...");
model.openInUI();

console.log ("--------------");
console.log ("Copy completed");


// Function to find concept (element+relation) with unique propertyvalue for propertykey
function find_copy_concept(propertyKey, propertyValue) {
	var found;
    // Iterate through all concepts in the model
    $("concept").forEach(function(c) {
        // Find the property value at the given propertyKey
        var value = c.prop(propertyKey);
        if(value && value == propertyValue) {
			found= c; 
		}
    });
	return found;
}








